version: 2.1


orbs:
  aws-assume: airswap/assume-role@0.2.0
  aws-s3: circleci/aws-s3@1.0.13
  terraform: circleci/terraform@2.0.2

executors:
  python-builder:
    docker:
      - image: eu.gcr.io/${GCP_PROJECT}/python-builder-lambda:latest
        auth:
          username: _json_key
          password: ${GCLOUD_SERVICE_KEY}
  aws-cli:
    docker:
      - image: eu.gcr.io/core-platform-1/awscli:latest
        auth:
          username: _json_key
          password: ${GCLOUD_SERVICE_KEY}

jobs:
  build-function:
    executor: python-builder
    steps:
      - checkout

      - setup_remote_docker

      - run:
          name: authenticate to google
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCP_PROJECT}
            gcloud auth configure-docker
      - run:
          name: build function
          command: |
            make lint
            make build-lambda
            echo "pwd: $(pwd)"
            mkdir -v workspace
            cp dist.zip workspace/dist.zip
            echo "${CIRCLE_BUILD_NUM}" > workspace/version
#            cp dist.zip ${SERVICE}-src-0.0.${CIRCLE_BUILD_NUM}.zip
#            gsutil cp ${SERVICE}-src-0.0.${CIRCLE_BUILD_NUM}.zip gs://cytora-service-versions/${SERVICE}/

      - persist_to_workspace:
          root: workspace
          paths:
            - dist.zip
            - version

  aws-publish:
    docker:
      - image: eu.gcr.io/core-platform-1/awscli:latest
        auth:
          username: _json_key
          password: ${GCLOUD_SERVICE_KEY}

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - aws-assume/assume-role:
          role-name: "CytoraCircleciAccess"
          account-id: "615147210125"

      - aws-s3/copy:
          from: /tmp/workspace/dist.zip
          to: "s3://cytora-platform-eu-west-1-service-versions/${SERVICE}/${SERVICE}-$(cat /tmp/workspace/version).zip"
          aws-region: AWS_REGION

  build-infra-dev:
    docker:
      - image: eu.gcr.io/core-platform-1/terraform-runtime:latest
        auth:
          username: _json_key
          password: ${GCLOUD_SERVICE_KEY}

    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout

      - aws-assume/assume-role:
          role-name: "CytoraCircleciAccess"
          account-id: "615147210125"

      - run:
          name: make dirs & get latest files
          command: |
            mkdir terraform-service-templates
            mkdir terraform-modules
            SERVICE_TEMPLATE_KEY=$(aws s3 ls cytora-platform-eu-west-1-terraform-service-templates-versions --recursive | sort | tail -n 1 | awk '{print $4}')
            echo "export SERVICE_TEMPLATE_KEY=$SERVICE_TEMPLATE_KEY" >> $BASH_ENV
            TERRAFORM_MODULES_KEY=$(aws s3 ls cytora-platform-eu-west-1-terraform-modules-versions --recursive | sort | tail -n 1 | awk '{print $4}')
            echo "export TERRAFORM_MODULES_KEY=$TERRAFORM_MODULES_KEY" >> $BASH_ENV

      - run:
          name: get build version
          command: |
            echo "export VERSION_NUMBER=$(cat /tmp/workspace/version)" >> $BASH_ENV

      - aws-s3/copy:
          from: "s3://cytora-platform-eu-west-1-terraform-service-templates-versions/${SERVICE_TEMPLATE_KEY}"
          to: ./terraform-service-templates
          aws-region: AWS_REGION

      - run:
          name: unzip terraform templates
          command: |
            cd terraform-service-templates
            tar -xvf ${SERVICE_TEMPLATE_KEY}

      - aws-s3/copy:
          from: "s3://cytora-platform-eu-west-1-terraform-modules-versions/${TERRAFORM_MODULES_KEY}"
          to: ./terraform-modules
          aws-region: AWS_REGION

      - run:
          name: unzip terraform modules
          command: |
            cd terraform-modules
            tar -xvf ${TERRAFORM_MODULES_KEY}

      - aws-assume/assume-role:
          role-name: "CytoraCircleciAccess"
          account-id: "897727315233"

      - terraform/init:
          backend: true
          backend_config_file: /terraform-service-templates/services/${SERVICE}/function-http/init.tfvars

      - terraform/plan:
          backend_config_file: init.tfvars
          backend_config: bucket="cytora-dev-terraform-eu-west-1",dynamodb_table="cytora-dev-terraform-state-lock"
          path: terraform-service-templates/services/${SERVICE}/function-http
          var_file: terraform.tfvars,common.tfvars
          var: service=${SERVICE},region=${AWS_REGION},version_number=${VERSION_NUMBER},environment="cytora-dev",runtime="python3.8"
          workspace: ${SERVICE}-function-http

      - terraform/apply:
          backend_config_file: init.tfvars
          backend_config: bucket="cytora-dev-terraform-eu-west-1",dynamodb_table="cytora-dev-terraform-state-lock"
          path: terraform-service-templates/services/${SERVICE}/function-http
          var_file: terraform.tfvars,common.tfvars
          var: service=${SERVICE},region=${AWS_REGION},version_number=${VERSION_NUMBER},environment="cytora-dev",runtime="python3.8"
          workspace: ${SERVICE}-function-http

  build-infra-prod:
    docker:
      - image: eu.gcr.io/core-platform-1/terraform-runtime:latest
        auth:
          username: _json_key
          password: ${GCLOUD_SERVICE_KEY}

    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout

      - aws-assume/assume-role:
          role-name: "CytoraCircleciAccess"
          account-id: "615147210125"

      - run:
          name: make dirs & get latest files
          command: |
            mkdir terraform-service-templates
            mkdir terraform-modules
            SERVICE_TEMPLATE_KEY=$(aws s3 ls cytora-platform-eu-west-1-terraform-service-templates-versions --recursive | sort | tail -n 1 | awk '{print $4}')
            echo "export SERVICE_TEMPLATE_KEY=$SERVICE_TEMPLATE_KEY" >> $BASH_ENV
            TERRAFORM_MODULES_KEY=$(aws s3 ls cytora-platform-eu-west-1-terraform-modules-versions --recursive | sort | tail -n 1 | awk '{print $4}')
            echo "export TERRAFORM_MODULES_KEY=$TERRAFORM_MODULES_KEY" >> $BASH_ENV

      - aws-s3/copy:
          from: "s3://cytora-platform-eu-west-1-terraform-service-templates-versions/${SERVICE_TEMPLATE_KEY}"
          to: ./terraform-service-templates
          aws-region: AWS_REGION

      - run:
          name: unzip terraform templates
          command: |
            cd terraform-service-templates
            tar -xvf ${SERVICE_TEMPLATE_KEY}

      - aws-s3/copy:
          from: "s3://cytora-platform-eu-west-1-terraform-modules-versions/${TERRAFORM_MODULES_KEY}"
          to: ./terraform-modules
          aws-region: AWS_REGION

      - run:
          name: unzip terraform modules
          command: |
            cd terraform-modules
            tar -xvf ${TERRAFORM_MODULES_KEY}

      - aws-assume/assume-role:
          role-name: "CytoraCircleciAccess"
          account-id: "663015356758"

      - terraform/init:
          backend: true
          backend_config_file: /terraform-service-templates/services/${SERVICE}/function-http/init.tfvars

      - terraform/plan:
          backend_config_file: init.tfvars
          backend_config: bucket="cytora-prod-terraform-eu-west-1",dynamodb_table="cytora-prod-terraform-state-lock"
          path: terraform-service-templates/services/${SERVICE}/function-http
          var_file: terraform.tfvars,common.tfvars
          var: service=${SERVICE},region=${AWS_REGION},version_number=${CIRCLE_TAG},environment="cytora-prod",runtime="python3.8"
          workspace: ${SERVICE}-function-http

      - terraform/apply:
          backend_config_file: init.tfvars
          backend_config: bucket="cytora-prod-terraform-eu-west-1",dynamodb_table="cytora-prod-terraform-state-lock"
          path: terraform-service-templates/services/${SERVICE}/function-http
          var_file: terraform.tfvars,common.tfvars
          var: service=${SERVICE},region=${AWS_REGION},version_number=${CIRCLE_TAG},environment="cytora-prod",runtime="python3.8"
          workspace: ${SERVICE}-function-http

workflows:
  version: 2
  build_and_push:
    jobs:
      - build-function:
          filters:
            branches:
              only:
                - master
                - main
      - aws-publish:
          requires:
            - build-function
          filters:
            branches:
              only:
                - master
                - main
      - build-infra-dev:
          requires:
            - aws-publish
          filters:
            branches:
              only:
                - master
                - main
      - build-infra-prod:
          filters:
            tags:
              only: /^*.*/
            branches:
              ignore: /.*/